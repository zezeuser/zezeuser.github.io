<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>roboRTS快速上手</title>
      <link href="/2021/09/28/roboRTS%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/2021/09/28/roboRTS%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>本文是 robormaster rmua 赛事2021年，官方开源代码的快速上手教程,决策部分为吉林大学决策代码，导航部分有部分修改。</p><h1 id="下载代码至本地"><a href="#下载代码至本地" class="headerlink" title="下载代码至本地"></a>下载代码至本地</h1><p>如果没有现有的工作空间则创造一个工作空间:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir catkin_ws</span><br><span class="line"><span class="built_in">cd</span> catkin_ws</span><br><span class="line">mkdir src</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><br>将代码放入工作空间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zezeuser/roborts_decision</span><br><span class="line">catkin_make</span><br><span class="line">此处报错请看问题一</span><br></pre></td></tr></table></figure></p><h1 id="运行单辆车的-导航，决策，定位"><a href="#运行单辆车的-导航，决策，定位" class="headerlink" title="运行单辆车的 导航，决策，定位"></a>运行单辆车的 导航，决策，定位</h1><h2 id="在仿真环境中："><a href="#在仿真环境中：" class="headerlink" title="在仿真环境中："></a>在仿真环境中：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch   icra_robomaster_emulator  decision_test.launch</span><br><span class="line">rosrun roborts_decision behavior_test_node __ns:=/red1</span><br></pre></td></tr></table></figure><h2 id="在现实环境测试："><a href="#在现实环境测试：" class="headerlink" title="在现实环境测试："></a>在现实环境测试：</h2><p>确保电脑与小车连接，确保雷达数据正确<br><a href="http://gbrain.top/2021/09/27/ubuntu18.04%E4%BD%BF%E7%94%A8%E9%9B%B7%E8%BE%BEG4/">ze’s  blog:  如何在ubuntu使用雷达G4</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rostopic list</span><br><span class="line">包含  /(arg namespace)/scan  即可</span><br></pre></td></tr></table></figure><p>修改串口名,并与下位机通讯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim catkin_ws/src/roborts_base/config/roborts_base_parameter.yaml </span><br><span class="line">修改串口名字，保存即可</span><br><span class="line">roslaunch roborts_bringup base.launch</span><br></pre></td></tr></table></figure><p>运行定位、导航 、决策</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch   roborts_bringup  test_finish.launch</span><br><span class="line">rosrun roborts_decision behavior_test_node __ns:=/red1</span><br></pre></td></tr></table></figure><h1 id="常见问题（长更新）"><a href="#常见问题（长更新）" class="headerlink" title="常见问题（长更新）"></a>常见问题（长更新）</h1><p><strong>问题一：</strong><br>编译报错<br>解决：将 <strong>icra_robomaster_emulator</strong> 包删除后编译，编译完成后再恢复文件重新编译即可<br><img src="https://img-blog.csdnimg.cn/8f55a3837d994c8e9395f32904bbb0e7.png" alt="在这里插入图片描述"></p><p><strong>问题二：</strong> 找不到 Local_planner server<br><img src="https://img-blog.csdnimg.cn/8e279fc59e0c403fa3b460f1f4b8a9c1.png" alt="error"><br>方法一：在local_planner_node 中  local_planner_node_action  话题名更改为 /local_planner_node_action 再在launch文件重映射即可<br>方法二：在local_planner_node 中私有化句柄去掉即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04使用雷达G4</title>
      <link href="/2021/09/27/ubuntu18.04%E4%BD%BF%E7%94%A8%E9%9B%B7%E8%BE%BEG4/"/>
      <url>/2021/09/27/ubuntu18.04%E4%BD%BF%E7%94%A8%E9%9B%B7%E8%BE%BEG4/</url>
      
        <content type="html"><![CDATA[<p>创建一个ROS工作空间或者已有的工作空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/YDLIDAR/YDLidar-SDK.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/YDLIDAR/ydlidar_ros_driver.git</span><br></pre></td></tr></table></figure><p>编译和安装SDK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> YDLidar-SDK/build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>对 ydlidar_ros_driver 包进行编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> catkin_workspace </span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>可选（用于串口映射）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chomd 0777 src/ydlidar_ros_driver/startup/*</span><br><span class="line">sudo sh src/ydlidar_ros_driver/startup/initenv.sh</span><br><span class="line">操作完成后，重新插入雷达</span><br></pre></td></tr></table></figure><p>如果没有串口映射，请执行以下步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ydlidar_ros_driver/launch</span><br><span class="line">vim lidar.launch</span><br><span class="line">将串口名字改成对应的设备名</span><br></pre></td></tr></table></figure><p>然后赋予串口权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /dev</span><br><span class="line">ls </span><br><span class="line">sudo chmod 777 串口名</span><br></pre></td></tr></table></figure><p>最后运行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch ydlidar_ros_driver lidar_view.launch</span><br></pre></td></tr></table></figure><p>在现实测试中需要注意的是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ydlidar_ros_driver/lidar_view.launch</span><br><span class="line">更改 波特率 ，红外扫描的范围并非 360 ，laser_link name 和 雷达坐标与其他坐标系的关系</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS分布式通讯</title>
      <link href="/2021/09/23/ROS%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E8%AE%AF/"/>
      <url>/2021/09/23/ROS%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<p>首先终端输入查看用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p>查看 <strong>ip</strong> ，终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>修改 hosts 文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/hosts</span><br></pre></td></tr></table></figure><br>前两行添加  格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主机ip  主机hostname</span><br><span class="line">从机ip  从机hostname</span><br></pre></td></tr></table></figure></p><p>在<strong>主机端</strong>需要：<br>对 .bashrc 的最后几行加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_HOSTNAME=chongge（主机的hostname）</span><br><span class="line"><span class="built_in">export</span> ROS_MASTER_URI=http://192.168.1.135:11311  （主机的ip地址）</span><br><span class="line"><span class="built_in">export</span> ROS_IP=192.168.1.146  （从机的ip地址）</span><br></pre></td></tr></table></figure><p>对<strong>从机端</strong>需要：<br>对 .bashrc 的最后几行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_HOSTNAME=xx（从机的hostname）</span><br><span class="line"><span class="built_in">export</span> ROS_MASTER_URI=http://192.168.1.135:11311  （主机的ip地址）</span><br><span class="line"><span class="built_in">export</span> ROS_IP=192.168.1.146  （从机的ip地址）</span><br></pre></td></tr></table></figure><p>然后<strong>主机</strong>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure><p>检测是否连接成功，在<strong>从机</strong>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic list</span><br></pre></td></tr></table></figure><p> <strong>能看到话题就ok了。</strong></p><p><strong>如何在自己的电脑终端打开别人的终端：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh hostname（别人的用户名）@（别人的地址） 注：无空格</span><br><span class="line">如ssh xx@192.168.1.146，</span><br></pre></td></tr></table></figure><br>成功了就会让你输入yes或者密码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Reinforcement Learning Introduction (RL 学习路线)</title>
      <link href="/2021/09/19/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
      <url>/2021/09/19/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是强化学习？强化学习与深度学习的差别在哪里？"><a href="#什么是强化学习？强化学习与深度学习的差别在哪里？" class="headerlink" title="什么是强化学习？强化学习与深度学习的差别在哪里？"></a>什么是强化学习？强化学习与深度学习的差别在哪里？</h2><p>1、有深度神经网络的机器学习是深度学习<br>2、估计未来的收益，并根据这些收益对当前动作进行强化的算法设计思想是强化学习<br>3、强化学习和深度学习并不是互斥的，即强化学习可以使用深度神经网络（深度强化学习，例如 DQN 算法）也可以不用（例：Q-table-learning算法）</p><h2 id="深度学习："><a href="#深度学习：" class="headerlink" title="深度学习："></a>深度学习：</h2><p>假设有一条式子 y = kx+b , 没有神经网络的时候我们可以使用最小二乘法去拟合 k 和 b ，<a href="https://www.zhihu.com/question/37031188/answer/411760828">最小二乘法的本质是什么？ - 知乎 (zhihu.com)</a>，但式子变得复杂时，即实际问题并不可能用一元一次方程拟合，可能是多元多次的方程，我们就要借助神经网络的多层神经元对这些实际数据进行拟合，深度学习的深度指的是它使用层数更深的神经网络，当层数加深后，我们就可以借助成熟的反向传播算法（如SGD+动量，Adam）对参数进行迭代更新，拟合出一元一次方程的k，b（实际问题的参数不止两个）。入门深度学习需要入门线性代数，反向传播，机器学习等。<br>深度学习一般都是有监督的，即在训练前，对数据进行贴标签，分类等；如：根据一万份体检报告去训练，使神经网络学会根据年龄预测身高，体重。</p><h2 id="强化学习："><a href="#强化学习：" class="headerlink" title="强化学习："></a>强化学习：</h2><p>训练一个机器人学会走路至终点，我们很难给数据贴标签，即我们很难定义哪个动作最好，我们只能定义机器人越快到终点越好。在训练的时候我们可以给机器人输入观察状态（observation date），让机器人根据当前状态选择动作，机器人（Agent）会自行探索各种动作组合（策略 Policy）。强化学习算法需要对动作未来收益（Q Value）进行预测，然后根据预测结果对高收益的动作强化，并验证那些有高预期收益的动作组合。从而让机器人（智能体 agent）在人类的引导下自学（越好的强化学习算法越不用人类操心）。<br>不使用神经网络的强化学习：Q-table-Learning，每一个状态的每一个动作都有对应的奖励（Q Value），使用一个表格列出来，经过迭代，这个表格逐渐完善；某个状态哪个动作奖励最大一目了然。<br>(注：在此处没有特殊说明则Q Value 就是 Reward)<br>Q-table-learning有一个巨大的缺陷，那就是当状态数量巨多，即Q-table根本完善不了，例如：一帧图像像素点有1000<em>1000个，一个像素点就有255</em>255*255种可能，把所有可能的状态列出来，那么这个table就是巨大的，直接可以把你的电脑内存占爆。如何解决这个问题，我们引入神经网络去拟合Q-Value，Human-level control through deep reinforcement learning | Nature，第一个经典的深度强化学习算法 : DQN（Deep Q Network）。DQN突破了state的数量限制，回到 y = kx+b这个式子 ，y指的是Q Value 我们需要输入 x（obs 和 action） 根据k , b（需要更新的网络参数） 算出y（Q Value） 。所以我们只需要知道 x ， k  ,  b就可以算出y（Q Value）,相比于Q table 这无疑是创新且聪明的做法。这是深度强化学习的鼻祖。<br>目前强化学习都会引入神经网络辅助学习，入门深度强化学习需要入门深度学习，概率论，（多智能体涉及博弈论）等。</p><h2 id="推荐书籍："><a href="#推荐书籍：" class="headerlink" title="推荐书籍："></a>推荐书籍：</h2><p>1、<a href="https://github.com/borninfreedom/DeepLearning/blob/master/Books/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8.pdf">《深入浅出强化学习：原理入门》</a><br>2、<a href="https://spinningup.openai.com/en/latest/">Spinning Up in Deep RL! — Spinning Up documentation (openai.com)</a><br>3、<a href="https://rl.qiwihui.com/zh_CN/latest/">《强化学习导论》强化学习导论 — 强化学习导论文档 </a></p><p>推荐博客：<br>2、<a href="https://openai.com/blog/">OpenAI Blog</a><br>3、<a href="https://deepmind.com/blog">Blog | DeepMind</a></p><h2 id="强化学习算法学习流程概览-在这里只提到单智能体Agent算法-："><a href="#强化学习算法学习流程概览-在这里只提到单智能体Agent算法-：" class="headerlink" title="强化学习算法学习流程概览(在这里只提到单智能体Agent算法)："></a>强化学习算法学习流程概览(在这里只提到单智能体Agent算法)：</h2><p>离散动作：（Value Gradient ）<br>Q-table-learning -&gt; DQN(Deep Q NetWork) -&gt; Double DQN -&gt; Dueling DQN -&gt;Double Dueling DQN (D3QN) -&gt;Twin Delayed DDPG (TD3 连续动作)<br>连续动作：（Policy Gradient）<br>Actor-Critic -&gt; Advantage Actor-Critic(A2C) -&gt; Asynchronus A2C (A3C) -&gt; Deep Deterministic Policy Gradient (DDPG) -&gt; Distributed Distributional DDPG (D4PG) -&gt; Soft Actor-Critic (SAC) -&gt; Trust Region Policy Optimization (TRPO) -&gt; Generalized Advantage Estimation (GAE) -&gt; Proximal Policy Optimization(PPO)<br><strong>强化学习处于上升期，众多算法还在发掘，需要我们不断与时俱进。</strong></p><h2 id="推荐算法库："><a href="#推荐算法库：" class="headerlink" title="推荐算法库："></a>推荐算法库：</h2><p><a href="https://github.com/AI4Finance-LLC/ElegantRL">Elegant RL （轻量化，可以魔改）</a><br><a href="https://github.com/DLR-RM/stable-baselines3">Baseline3（支持多种动作，多智能体）</a><br><a href="https://github.com/ray-project/ray">Ray【RLlib】（支持分布式，支持多个动作，多智能体）</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>importance Sampling (重要性采样)</title>
      <link href="/2021/07/18/importance%20Sampling%20(%E9%87%8D%E8%A6%81%E6%80%A7%E9%87%87%E6%A0%B7)/"/>
      <url>/2021/07/18/importance%20Sampling%20(%E9%87%8D%E8%A6%81%E6%80%A7%E9%87%87%E6%A0%B7)/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;当随机变量 $z$ 的分布非常复杂时，无法利用解析的方法产生逼近期望的样本，这时，我们可以选用一个概率分布和简单，很容易产生样本的概率分布 $q(z)$ ,例如正态分布。</p><p>&emsp;&emsp;原函数 $f(z)$ 本身就是定义在一个分布之上，我们定义这个分布为 $\pi(z)$ ，所以求<strong>函数期望公式</strong>为：</p><script type="math/tex; mode=display">E\left [ f\right ] = \int f(z) \pi (z)dz</script><p>下图中 <strong>$p(z)$ 即是 $\pi(z)$</strong><br><img src="https://img-blog.csdnimg.cn/20210705003935815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUyNDM0NDU3,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>&emsp;&emsp;<strong>但是我们无法从 $\pi(z)$ 上进行采样，所以找到一个简单的分布 $q    (z)$ ，从它进行采样，间接求出 $f(z)$ 在概率分布 $\pi(z)$ 下的期望</strong>。</p><p><strong>将 $q(z)$ 代替 $\pi(z)$ 得到公式</strong>：</p><script type="math/tex; mode=display">E\left [ f\right ] = \int_{z} f(z)q(z)dz \approx \frac{1}{N}\sum_{i=1}^{N}f(z_{i})</script><p><strong>对原式子进行替换即</strong>：$\pi(z)f(z) = q(z)\frac{\pi(z)}{q(z)}f(z)$ 可以得到：</p><script type="math/tex; mode=display">E\left [ f\right ] =\int_{z}^{} q(z)\frac{\pi(z)}{q(z)}f(z)</script><p>这个式子中，我们可以将 <strong>函数 $G(z) = \frac{\pi(z)}{q(z)}f(z)$</strong> <strong>定义在分布 $q(z)$ 上的期望</strong>即：</p><script type="math/tex; mode=display">E\left [ f\right ] =\int_{z}^{} q(z)G(z)\approx \frac{1}{N}\sum_{n}^{}\frac{\pi(z^{n})}{q(z^{n})}f(z^{n}) , z^{n}\sim q(z) \\(1)</script><p>在这里，<strong>$\frac{\pi(z^{n})}{q(z^{n})}$ 就是重要性权重。</strong> </p><p>定义$w^{n} = \frac{\pi(z^{n})}{q(z^{n})}$ , 则 <script type="math/tex">E(f) = \frac{1}{N}\sum_{n}^{}w^{n}f(z^{n})  \\(2)</script><br>&emsp;&emsp;由 (1)式可以知道，<strong>基于重要性采样是没有偏差的，即估计值等于真实值，但是它的方差无穷大</strong>。这是因为被积函数乘了一个重要性权重，改变了被积函数的形状和分布。尽管被积函数的均值没有改变但方差发生明显改变。<br>&emsp;&emsp;我们知道我们采用的是分布 $q(z)$ 采样，当  $q(z)$  与 原概率分布 $\pi(z)$ 越接近，方差则越小。但往往 $\pi(z)$ 很难求或很奇怪，很难有一个简单的 $q(z)$ 与它相近，如果 $\pi(z)$ 和 $q(z)$ 的差别很大，则方差会趋近于无穷大。<br>&emsp;&emsp;<strong>一种减少重要性采样积分方差的办法就是加权重要性采样：</strong></p><script type="math/tex; mode=display">E(f) \approx   \frac{1}{N}\sum_{n}^{}\frac{w^{n}}{\sum_{m=1}^{N}w^{m}}f(z^{n})</script><p>在 off policy 中，行动策略 $\mu$ 用来产生样本，产生的轨迹相当于重要性采样中的 $q(z)$ ，改进和评估的策略 $\pi$  对应的轨迹概率分布为 $\pi(z)$ ,利用行动策略产生的累计函数评估 $\pi$ 时，需要在累计函数返回值前乘以重要性权重<br>&emsp;&emsp;在目标策略 $\pi$ 下，一次试验概率为：</p><script type="math/tex; mode=display">Pr(A_{t},S_{t+1},\cdots ,S_{T}) = \prod_{k=t}^{T-1}\pi(A_{k}|S_{k})p(S_{k+1}|S_{k},A_{k}))</script><p>&emsp;&emsp;在行动策略 $\mu$ 下，一次试验概率为：</p><script type="math/tex; mode=display">Pr(A_{t},S_{t+1},\cdots ,S_{T}) = \prod_{k=t}^{T-1}\mu(A_{k}|S_{k})p(S_{k+1}|S_{k},A_{k}))</script><p>&emsp;&emsp;所以重要性权重为：</p><script type="math/tex; mode=display">\rho_{t}^{T} = \frac{ \prod_{k=t}^{T-1}\pi(A_{k}|S_{k})p(S_{k+1}|S_{k},A_{k}))}{\prod_{k=t}^{T-1}\mu(A_{k}|S_{k})p(S_{k+1}|S_{k},A_{k}))} = \prod _{k=t}^{T-1}\frac{\pi(A_{k}|S_{k}))}{\mu(A_k|S_k))}</script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo在Github上的部署</title>
      <link href="/2021/05/13/hexo%E5%9C%A8Github%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/05/13/hexo%E5%9C%A8Github%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><strong>关键词： Hexo ， Github </strong> </p><h2 id="本地搭建git库和连接远程库"><a href="#本地搭建git库和连接远程库" class="headerlink" title="本地搭建git库和连接远程库"></a>本地搭建git库和连接远程库</h2><p><strong>一</strong>、首先需要注册我们Git（<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖旭峰老师的Git教程</a>）到我们的计算机中，我们需要去<a href="https://github.com/">Github</a>上注册一个账号,注册完成后，点击头像点击Your repositories，来到该页面<img src="https://img-blog.csdnimg.cn/20210512205331592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUyNDM0NDU3,size_16,color_FFFFFF,t_70" alt="">点击New后来到以下页面：<br><img src="https://img-blog.csdnimg.cn/20210512205549806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUyNDM0NDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> （1） Repositiory name  填写 <strong><em>“你的用户名.github.io”</em></strong><br>    (必须)，例如我的用户名是<em>zezeuser</em>，则我该填写  <strong>zezeuser.github.io</strong>  ;<br> （2）Desciption可填my_blog（非必须）;<br> （3）选择 <strong><em>Public</em></strong> ;<br> （4） Add a README File (非必须)<br>（5） Create repository</p><p><strong>二</strong>、<strong>安装GIt：<a href="https://git-scm.com/">Git</a> , 选择属于自己的版本，安装即可</strong></p><p><strong>三</strong>、<strong>桌面右键，选择</strong>Git Bash Here<strong> ， 输入以下命令配置本地信息：</strong><br><img src="https://img-blog.csdnimg.cn/20210512211514623.png" alt="在这里插入图片描述"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">git config --global user.name &quot;你的GitHub用户名&quot;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p><strong>四</strong>、<strong>生成密钥</strong> ： </p><p>输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>（1）去到自己电脑中的  <strong>C:\Users\..\.ssh</strong>  目录找到   <strong>id_rsa.pub</strong>  <strong>,  复制里面的内容</strong><img src="https://img-blog.csdnimg.cn/20210512212436676.png" alt=""><br>（2）打开<a href="https://github.com/">GIthub</a> ， 点击头像选择  <em>Setting</em>  后如下图所示选择  <em>SSH and GPG Keys</em>  ，<br><img src="https://img-blog.csdnimg.cn/20210512213101320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUyNDM0NDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（3）然后<strong>复制你的公共密钥到Key中</strong> ， 名字随意<br><img src="https://img-blog.csdnimg.cn/20210512213239434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUyNDM0NDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（4）测试是否连接成功 ， 打开Git bash ， 输入以下命令：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">- ssh git@github.com</span></span><br></pre></td></tr></table></figure><p> <strong>成功后会显示你的GIthub的用户名</strong><br><img src="https://img-blog.csdnimg.cn/20210512214216882.png" alt="在这里插入图片描述"></p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ul><li>安装<a href="https://nodejs.org/en/">Node.js</a><br>安装的时候注意选择 Add to path</li><li>查看是否安装成功：Win+R          </li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">node -v</span></span><br></pre></td></tr></table></figure><p>输出版本号则成功 </p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>&emsp;&emsp;新建一个Blog文件夹，将开头新建的仓库 <strong>git clone</strong> 到你的文件夹中 ， 进入到你的仓库 ，右键  <strong>git bash here</strong>,</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">npm install -g hexo-cli</span></span><br><span class="line"><span class="xml">hexo init</span></span><br></pre></td></tr></table></figure><h2 id="配置Hexo到GitHub"><a href="#配置Hexo到GitHub" class="headerlink" title="配置Hexo到GitHub"></a>配置Hexo到GitHub</h2><p>&emsp;&emsp;在你的blog文件夹中找到 _config.ym ， 拉到最底下修改成以下代码，github写你的自己生成的库<br><img src="https://img-blog.csdnimg.cn/20210513194536936.png" alt="在这里插入图片描述"><br>&emsp;&emsp;在你的 git bash 窗口输入以下命令 , 具体含义查看<a href="https://hexo.io/zh-cn/docs/">hexo中文文档</a></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">hexo clean</span></span><br><span class="line"><span class="xml">hexo g</span></span><br><span class="line"><span class="xml">hexo s</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;打开你的浏览器 ， 网址输入 <strong><a href="http://localhost:4000">http://localhost:4000</a></strong> ， 既可以在你的本地查看你的Blog啦！</p><p>&emsp;&emsp;在你的 git bash 窗口输入 ， 就可以将你的 Blog 上传至 GitHub</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="xml">hexo clean</span></span><br><span class="line"><span class="xml">hexo generate</span></span><br><span class="line"><span class="xml">hexo deploy</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;就可以在网站上输入  <strong><a href="http://yourgithubname.github.io">http://yourgithubname.github.io</a></strong>  查看你的博客了</p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>&emsp;&emsp;我选择的是在阿里云购买域名 ， 根据个人喜好购买域名 ， 购买完成后 ， 进入个人控制台  ，到域名服务<img src="https://img-blog.csdnimg.cn/2021051319585438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUyNDM0NDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>选择 <strong>解析</strong>  ,Win  + R   输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping   yourgithubname.github.io</span><br></pre></td></tr></table></figure><p>将 <strong>IP</strong>   和你的<strong>GIthub.io</strong> 输入进去 </p><ul><li><strong><em>gituhu.io</em></strong> 选择 <strong>@  , CNAME ,  默认</strong></li><li><strong><em>IP</em> 选择   WWW  ,  A  ,  默认</strong>   </li></ul><p><img src="https://img-blog.csdnimg.cn/20210513200739958.png" alt="在这里插入图片描述"></p><p>&emsp;&emsp;进去自己的 Github 放 Blog 的仓库 ， 进入<strong>Setting</strong> ，选择 <strong>Page</strong> ，<br><img src="https://img-blog.csdnimg.cn/20210513200344655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUyNDM0NDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在 <strong>Custom domain</strong> 输入你的域名  <strong>Save</strong> 即可。</p><p><strong>现在你就可以用你的域名进去你的博客啦！</strong><br>但是每一次更新blog都需要重新修改域名，这怎么能忍？接下面来介绍怎么一劳永逸</p><h2 id="永久修改域名的方法"><a href="#永久修改域名的方法" class="headerlink" title="永久修改域名的方法"></a>永久修改域名的方法</h2><p>(1) 打开 <strong>hexo目录</strong> 下的 <strong>_config.yml</strong> 文件，找到URL，将其指向域名地址，我的是：</p><blockquote><p><a href="http://gbrain,top">http://gbrain,top</a></p></blockquote><p>(2) 打开 <strong>hexo/source</strong> 目录下的<strong>CNAME</strong>文件（<strong>没有则新建，没有后缀</strong>）<br>内容为你的域名（gbrain,top），保存即可</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
